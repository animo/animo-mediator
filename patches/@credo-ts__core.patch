diff --git a/build/agent/MessageSender.js b/build/agent/MessageSender.js
index 29d910e48cd179b40984123b3dcc44051e08d2b1..922b11396063e5678fda01032a07d4b2fc4234c3 100644
--- a/build/agent/MessageSender.js
+++ b/build/agent/MessageSender.js
@@ -76,7 +76,7 @@ let MessageSender = class MessageSender {
         this.logger.debug('Sending message');
         await session.send(agentContext, encryptedMessage);
     }
-    async sendPackage(agentContext, { connection, encryptedMessage, recipientKey, options, }) {
+    async sendPackage(agentContext, { connection, encryptedMessage, recipientKey, options, messageType, }) {
         var _a, e_1, _b, _c;
         var _d;
         const errors = [];
@@ -141,6 +141,7 @@ let MessageSender = class MessageSender {
                 connectionId: connection.id,
                 recipientDids: [(0, helpers_1.verkeyToDidKey)(recipientKey)],
                 payload: encryptedMessage,
+                messageType,
             });
             return;
         }
diff --git a/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts b/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
index decb61a2a9e9c027a4d8841ebda943e3bd538a63..d82a10b6b16bfe5a7625e741c5ec4f3e99462e9e 100644
--- a/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
+++ b/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
@@ -13,6 +13,7 @@ export interface AddMessageOptions {
     connectionId: string;
     recipientDids: string[];
     payload: EncryptedMessage;
+    messageType?: string
 }
 export interface RemoveMessagesOptions {
     connectionId: string;
diff --git a/build/modules/routing/services/MediatorService.js b/build/modules/routing/services/MediatorService.js
index 17a87cddb6e5f9da0906de37b700363df3bdaa86..2770251a7d0f9c3fd37faeaeeb25e6a8ed21c51c 100644
--- a/build/modules/routing/services/MediatorService.js
+++ b/build/modules/routing/services/MediatorService.js
@@ -99,6 +99,7 @@ let MediatorService = class MediatorService {
                     connection,
                     recipientKey: (0, helpers_1.verkeyToDidKey)(message.to),
                     encryptedMessage: message.message,
+                    messageType: message.messageType,
                 });
         }
     }